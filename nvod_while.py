#Для получения данных в программах используется функция input().
#Цикл while в языке Python позволяет выполнять программу, пока некоторое условие остается истинным.

prompt = "If you tell us who you are, we can personalize the messages you see."
prompt += "\nWhat is your first name? "
name = input(prompt)
print("\nHello, " + name + "!")
#В этом примере продемонстрирован один из способов построения длинных строк. Первая часть длинного сообщения сохраняется в переменной prompt. Затем оператор += объединяет текст, хранящийся в prompt, с новым фрагментом текста.

#Использование int() для получения числового ввода

#При работе с числовыми данными может пригодиться оператор вычисления остатка (%), который делит одно число на другое и возвращает остаток:
print(4 % 3)
#1
#Четные числа всегда делятся на 2. Следовательно, если остаток от деления на 2 равен 0 (number % 2 == 0), число четное, а если нет — нечетное.

#Циклы while
#Цикл for получает коллекцию элементов и выполняет блок кода по одному разу для каждого элемента в коллекции. В отличие от него, цикл while продолжает выполняться, пока остается истинным некоторое условие.

#Цикл while может использоваться для перебора числовой последовательности.
#Например, следующий цикл считает от 1 до 5:
current_number = 1
while current_number <= 5:
 print(current_number)
 current_number += 1 #(Оператор += является сокращенной формой записи для current_number = current_number + 1.)

#Программа может выполняться, пока пользователь не захочет остановить ее, — для этого бульшая часть кода заключается в цикл while. В программе определяется признак завершения, и программа работает, пока пользователь не введет нужное значение:
prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "
message = ""
#while message != 'quit':
 #message = input(prompt)
 #print(message)

#Программа работает неплохо, если не считать того, что она выводит слово 'quit', словно оно является обычным сообщением. Простая проверка if решает проблему:
prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "
message = ""
#while message != 'quit':
 #message = input(prompt)
 #if message != 'quit':
   #print(message)

#Флаги
#В предыдущем примере программа выполняла некоторые операции, пока заданное условие оставалось истинным. А что если вы пишете более сложную программу, выполнение которой может прерываться по нескольким разным условиям? Например, компьютерная игра может завершаться по разным причинам: у игрока кончились все «жизни»; прошло отведенное время; все города, которые он должен был защищать, были уничтожены и т. д. Игра должна завершаться при выполнении любого из этих условий. Попытки проверять все возможные условия в одной команде while быстро усложняются и становятся слишком громоздкими.
#Если программа должна выполняться только при истинности нескольких условий, определите одну переменную-флаг. 

#Добавим флаг в программу parrot.py из предыдущего раздела. Этот флаг, который мы назовем active (хотя переменная может называться как угодно), управляет тем, должно ли продолжаться выполнение программы:
prompt = "\nTell me something, and I will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program. "

active = True
#while active:
 #message = input(prompt)
 #if message == 'quit':
   #active = False
 #else:
   #print(message)

#Команда break и выход из цикла
#Чтобы немедленно прервать цикл while без выполнения оставшегося кода в цикле независимо от состояния условия, используйте команду break.

#Команда continue и продолжение цикла
#Вместо того чтобы полностью прерывать выполнение цикла без выполнения оставшейся части кода, вы можете воспользоваться командой continue для возвращения к началу цикла и проверке условия. Например, возьмем цикл, который считает от 1 до 10, но выводит только нечетные числа в этом диапазоне:
current_number = 0
while current_number < 10:
 current_number += 1
 if current_number % 2 == 0:
  continue

 print(current_number)

#Если ваша программа зациклилась, нажмите Ctrl+C или просто закройте терминальное окно с выводом программы.

#DZ
x = "Vedi pervoe dopolnenie: " 
x += "\nIli vedi: o "
x += "\n"
w = ""
while w != 2:
  w = str(input(x))
  if w != 'o':
    print(w + " dobavlen")
  else:
    print("OK")
    break

skaz = "Napishi svoi age: "
age = int(input(skaz))
while isinstance(age, int):
  if age < 3:
    print("Price 0$")
  elif 3 <= age <= 12:
    print("Price 10$")
  else:
    print("Price 15$")
  break


#Использование циклов while со списками и словарями позволяет собирать, хранить и упорядочивать большие объемы данных для последующего анализа и обработки. Возьмем список недавно зарегистрированных, но еще не проверенных пользователей сайта. Как переместить пользователей после проверки в отдельный список  Использование цикла while со списками и словарями  131 проверенных пользователей? Одно из возможных решений: используем цикл while для извлечения пользователей из списка непроверенных, проверяем их и включае в отдельный список проверенных пользователей. Код может выглядеть так:

# Начинаем с двух списков: пользователей для проверки
# и пустого списка для хранения проверенных пользователей.
unconfirmed_users = ['alice', 'brian', 'candace']
confirmed_users = []
# Проверяем каждого пользователя, пока остаются непроверенные
# пользователи. Каждый пользователь, прошедший проверку,
# перемещается в список проверенных.
while unconfirmed_users:
  current_user = unconfirmed_users.pop()

  print("Verifying user: " + current_user.title())
  confirmed_users.append(current_user)
# Вывод всех проверенных пользователей.
print("\nThe following users have been confirmed:")
for confirmed_user in confirmed_users:
  print(confirmed_user.title())


#Удаление всех вхождений конкретного значения из списка
#В главе 3 функция remove() использовалась для удаления конкретного значения из списка. Функция remove() работала, потому что интересующее нас значение  встречалось в списке только один раз. Но что если вы захотите удалить все вхождения значения из списка? Допустим, имеется список pets, в котором значение 'cat' встречается многократно. Чтобы удалить все экземпляры этого значения, можно выполнять цикл while до тех пор, пока в списке не останется ни одного экземпляра 'cat':
pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']
print(pets)
while 'cat' in pets:
 pets.remove('cat')

print(pets)

#Заполнение словаря данными, введенными пользователем
#При каждом проходе цикла while ваша программа может запрашивать любое необходимое количество данных. Напишем программу, которая при каждом проходе цикла запрашивает имя участника и его ответ. Собранные данные будут сохраняться в словаре, потому что каждый ответ должен быть связан с конкретным пользователем:
responses = {}
# Установка флага продолжения опроса.
polling_active = True
while polling_active:
 # Запрос имени и ответа пользователя.
  name = input("\nWhat is your name? ")
  response = input("Which mountain would you like to climb someday? ")
  # Ответ сохраняется в словаре:
  responses[name] = response
  # Проверка продолжения опроса.
  repeat = input("Would you like to let another person respond? (yes/ no) ")
  if repeat == 'no':
    polling_active = False

# Опрос завершен, вывести результаты.
print("\n--- Poll Results ---")
for name, response in responses.items():
 print(name + " would like to climb " + response + ".")

sandwich_orders = ['a', 'b', 'x']
finished_sandwiches = []
while sandwich_orders:
  sandwich_order = sandwich_orders.pop()
  print("I made your tuna sandwich " + sandwich_order)
  finished_sandwiches.append(sandwich_order)
for finished_sandwiche in finished_sandwiches:
  print(finished_sandwiche)